-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------

state 10 contains 9 shift/reduce conflicts.
state 66 contains 9 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_getSyntaxTree -> program                    (0)
	program -> stmts                                   (1)
	stmts -> stmt scs stmts                            (2)
	stmts -> stmt scs                                  (3)
	stmt -> fundecl                                    (4)
	stmt -> vardecl ';'                                (5)
	stmt -> expr ';'                                   (6)
	scs -> scs ';'                                     (7)
	scs ->                                             (8)
	names -> names ',' NAME                            (9)
	names -> NAME                                      (10)
	names ->                                           (11)
	body -> open stmts close                           (12)
	names_body -> names_open stmts close               (13)
	open -> '{'                                        (14)
	names_open -> '(' names ')' '{'                    (15)
	close -> '}'                                       (16)
	fundecl -> fun_NAME names_body                     (17)
	fundecl -> fun_OPNAME names_body                   (18)
	fun_NAME -> 'fun' NAME                             (19)
	fun_OPNAME -> 'fun' OPNAME                         (20)
	vardecl -> 'var' vardecls                          (21)
	vardecls -> declOrInit ',' vardecls                (22)
	vardecls -> declOrInit                             (23)
	declOrInit -> NAME                                 (24)
	declOrInit -> NAME '=' expr                        (25)
	expr -> 'return' expr                              (26)
	expr -> NAME '=' expr                              (27)
	expr -> 'go' body                                  (28)
	expr -> opexpr                                     (29)
	OPNAME -> OP1                                      (30)
	OPNAME -> OP2                                      (31)
	OPNAME -> OP3                                      (32)
	OPNAME -> OP4                                      (33)
	OPNAME -> OP5                                      (34)
	OPNAME -> OP6                                      (35)
	OPNAME -> OP7                                      (36)
	opexpr -> opexpr '||' opexpr                       (37)
	opexpr -> opexpr '&&' opexpr                       (38)
	opexpr -> '!' opexpr                               (39)
	opexpr -> opexpr OPNAME opexpr                     (40)
	opexpr -> OPNAME expr                              (41)
	opexpr -> smallexpr                                (42)
	smallexpr -> NAME                                  (43)
	smallexpr -> NAME '(' exprs ')'                    (44)
	smallexpr -> LITERAL                               (45)
	smallexpr -> '(' expr ')'                          (46)
	smallexpr -> ifcase elseifs elsecase               (47)
	smallexpr -> 'while' '(' expr ')' body             (48)
	smallexpr -> 'fun' names_body                      (49)
	ifcase -> 'if' '(' expr ')' body                   (50)
	elseifs -> 'elsif' '(' expr ')' body elseifs       (51)
	elseifs ->                                         (52)
	elsecase -> 'else' body                            (53)
	elsecase ->                                        (54)
	exprs -> expr ',' exprs                            (55)
	exprs ->                                           (56)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'if'           { IF }
	'else'         { ELSE }
	'elsif'        { ELSIF }
	'while'        { WHILE }
	'var'          { VAR }
	'fun'          { FUN }
	'return'       { RETURN }
	'go'           { GO }
	'||'           { OR }
	'&&'           { AND }
	'!'            { NOT }
	OP1            { OP1     $$ }
	OP2            { OP2     $$ }
	OP3            { OP3     $$ }
	OP4            { OP4     $$ }
	OP5            { OP5     $$ }
	OP6            { OP6     $$ }
	OP7            { OP7     $$ }
	NAME           { NAME    $$ }
	LITERAL        { LITERAL $$ }
	'('            { DELIM '(' }
	')'            { DELIM ')' }
	'{'            { DELIM '{' }
	'}'            { DELIM '}' }
	','            { DELIM ',' }
	';'            { DELIM ';' }
	'='            { DELIM '=' }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_getSyntaxTree rule  0
	program         rule  1
	stmts           rules 2, 3
	stmt            rules 4, 5, 6
	scs             rules 7, 8
	names           rules 9, 10, 11
	body            rule  12
	names_body      rule  13
	open            rule  14
	names_open      rule  15
	close           rule  16
	fundecl         rules 17, 18
	fun_NAME        rule  19
	fun_OPNAME      rule  20
	vardecl         rule  21
	vardecls        rules 22, 23
	declOrInit      rules 24, 25
	expr            rules 26, 27, 28, 29
	OPNAME          rules 30, 31, 32, 33, 34, 35, 36
	opexpr          rules 37, 38, 39, 40, 41, 42
	smallexpr       rules 43, 44, 45, 46, 47, 48, 49
	ifcase          rule  50
	elseifs         rules 51, 52
	elsecase        rules 53, 54
	exprs           rules 55, 56

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_getSyntaxTree -> . program                   (rule 0)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'var'          shift, and enter state 15
	'fun'          shift, and enter state 16
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	program        goto state 30
	stmts          goto state 2
	stmt           goto state 3
	fundecl        goto state 4
	fun_NAME       goto state 5
	fun_OPNAME     goto state 6
	vardecl        goto state 7
	expr           goto state 8
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 1

	program -> . stmts                                  (rule 1)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'var'          shift, and enter state 15
	'fun'          shift, and enter state 16
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	stmts          goto state 2
	stmt           goto state 3
	fundecl        goto state 4
	fun_NAME       goto state 5
	fun_OPNAME     goto state 6
	vardecl        goto state 7
	expr           goto state 8
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 2

	program -> stmts .                                  (rule 1)

	%eof           reduce using rule 1


State 3

	stmts -> stmt . scs stmts                           (rule 2)
	stmts -> stmt . scs                                 (rule 3)

	'if'           reduce using rule 8
	'while'        reduce using rule 8
	'var'          reduce using rule 8
	'fun'          reduce using rule 8
	'return'       reduce using rule 8
	'go'           reduce using rule 8
	'!'            reduce using rule 8
	OP1            reduce using rule 8
	OP2            reduce using rule 8
	OP3            reduce using rule 8
	OP4            reduce using rule 8
	OP5            reduce using rule 8
	OP6            reduce using rule 8
	OP7            reduce using rule 8
	NAME           reduce using rule 8
	LITERAL        reduce using rule 8
	'('            reduce using rule 8
	'}'            reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8

	scs            goto state 61

State 4

	stmt -> fundecl .                                   (rule 4)

	'if'           reduce using rule 4
	'while'        reduce using rule 4
	'var'          reduce using rule 4
	'fun'          reduce using rule 4
	'return'       reduce using rule 4
	'go'           reduce using rule 4
	'!'            reduce using rule 4
	OP1            reduce using rule 4
	OP2            reduce using rule 4
	OP3            reduce using rule 4
	OP4            reduce using rule 4
	OP5            reduce using rule 4
	OP6            reduce using rule 4
	OP7            reduce using rule 4
	NAME           reduce using rule 4
	LITERAL        reduce using rule 4
	'('            reduce using rule 4
	'}'            reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 5

	fundecl -> fun_NAME . names_body                    (rule 17)

	'('            shift, and enter state 45

	names_body     goto state 60
	names_open     goto state 42

State 6

	fundecl -> fun_OPNAME . names_body                  (rule 18)

	'('            shift, and enter state 45

	names_body     goto state 59
	names_open     goto state 42

State 7

	stmt -> vardecl . ';'                               (rule 5)

	';'            shift, and enter state 58


State 8

	stmt -> expr . ';'                                  (rule 6)

	';'            shift, and enter state 57


State 9

	opexpr -> OPNAME . expr                             (rule 41)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	expr           goto state 56
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 10

	expr -> opexpr .                                    (rule 29)
	opexpr -> opexpr . '||' opexpr                      (rule 37)
	opexpr -> opexpr . '&&' opexpr                      (rule 38)
	opexpr -> opexpr . OPNAME opexpr                    (rule 40)

	'||'           shift, and enter state 54
			(reduce using rule 29)

	'&&'           shift, and enter state 55
			(reduce using rule 29)

	OP1            shift, and enter state 20
			(reduce using rule 29)

	OP2            shift, and enter state 21
			(reduce using rule 29)

	OP3            shift, and enter state 22
			(reduce using rule 29)

	OP4            shift, and enter state 23
			(reduce using rule 29)

	OP5            shift, and enter state 24
			(reduce using rule 29)

	OP6            shift, and enter state 25
			(reduce using rule 29)

	OP7            shift, and enter state 26
			(reduce using rule 29)

	')'            reduce using rule 29
	','            reduce using rule 29
	';'            reduce using rule 29

	OPNAME         goto state 53

State 11

	opexpr -> smallexpr .                               (rule 42)

	'||'           reduce using rule 42
	'&&'           reduce using rule 42
	OP1            reduce using rule 42
	OP2            reduce using rule 42
	OP3            reduce using rule 42
	OP4            reduce using rule 42
	OP5            reduce using rule 42
	OP6            reduce using rule 42
	OP7            reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42


State 12

	smallexpr -> ifcase . elseifs elsecase              (rule 47)

	'else'         reduce using rule 52
	'elsif'        shift, and enter state 52
	'||'           reduce using rule 52
	'&&'           reduce using rule 52
	OP1            reduce using rule 52
	OP2            reduce using rule 52
	OP3            reduce using rule 52
	OP4            reduce using rule 52
	OP5            reduce using rule 52
	OP6            reduce using rule 52
	OP7            reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	';'            reduce using rule 52

	elseifs        goto state 51

State 13

	ifcase -> 'if' . '(' expr ')' body                  (rule 50)

	'('            shift, and enter state 50


State 14

	smallexpr -> 'while' . '(' expr ')' body            (rule 48)

	'('            shift, and enter state 49


State 15

	vardecl -> 'var' . vardecls                         (rule 21)

	NAME           shift, and enter state 48

	vardecls       goto state 46
	declOrInit     goto state 47

State 16

	fun_NAME -> 'fun' . NAME                            (rule 19)
	fun_OPNAME -> 'fun' . OPNAME                        (rule 20)
	smallexpr -> 'fun' . names_body                     (rule 49)

	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 44
	'('            shift, and enter state 45

	names_body     goto state 41
	names_open     goto state 42
	OPNAME         goto state 43

State 17

	expr -> 'return' . expr                             (rule 26)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	expr           goto state 40
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 18

	expr -> 'go' . body                                 (rule 28)

	'{'            shift, and enter state 39

	body           goto state 37
	open           goto state 38

State 19

	opexpr -> '!' . opexpr                              (rule 39)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 36
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	OPNAME         goto state 9
	opexpr         goto state 35
	smallexpr      goto state 11
	ifcase         goto state 12

State 20

	OPNAME -> OP1 .                                     (rule 30)

	'if'           reduce using rule 30
	'while'        reduce using rule 30
	'fun'          reduce using rule 30
	'return'       reduce using rule 30
	'go'           reduce using rule 30
	'!'            reduce using rule 30
	OP1            reduce using rule 30
	OP2            reduce using rule 30
	OP3            reduce using rule 30
	OP4            reduce using rule 30
	OP5            reduce using rule 30
	OP6            reduce using rule 30
	OP7            reduce using rule 30
	NAME           reduce using rule 30
	LITERAL        reduce using rule 30
	'('            reduce using rule 30


State 21

	OPNAME -> OP2 .                                     (rule 31)

	'if'           reduce using rule 31
	'while'        reduce using rule 31
	'fun'          reduce using rule 31
	'return'       reduce using rule 31
	'go'           reduce using rule 31
	'!'            reduce using rule 31
	OP1            reduce using rule 31
	OP2            reduce using rule 31
	OP3            reduce using rule 31
	OP4            reduce using rule 31
	OP5            reduce using rule 31
	OP6            reduce using rule 31
	OP7            reduce using rule 31
	NAME           reduce using rule 31
	LITERAL        reduce using rule 31
	'('            reduce using rule 31


State 22

	OPNAME -> OP3 .                                     (rule 32)

	'if'           reduce using rule 32
	'while'        reduce using rule 32
	'fun'          reduce using rule 32
	'return'       reduce using rule 32
	'go'           reduce using rule 32
	'!'            reduce using rule 32
	OP1            reduce using rule 32
	OP2            reduce using rule 32
	OP3            reduce using rule 32
	OP4            reduce using rule 32
	OP5            reduce using rule 32
	OP6            reduce using rule 32
	OP7            reduce using rule 32
	NAME           reduce using rule 32
	LITERAL        reduce using rule 32
	'('            reduce using rule 32


State 23

	OPNAME -> OP4 .                                     (rule 33)

	'if'           reduce using rule 33
	'while'        reduce using rule 33
	'fun'          reduce using rule 33
	'return'       reduce using rule 33
	'go'           reduce using rule 33
	'!'            reduce using rule 33
	OP1            reduce using rule 33
	OP2            reduce using rule 33
	OP3            reduce using rule 33
	OP4            reduce using rule 33
	OP5            reduce using rule 33
	OP6            reduce using rule 33
	OP7            reduce using rule 33
	NAME           reduce using rule 33
	LITERAL        reduce using rule 33
	'('            reduce using rule 33


State 24

	OPNAME -> OP5 .                                     (rule 34)

	'if'           reduce using rule 34
	'while'        reduce using rule 34
	'fun'          reduce using rule 34
	'return'       reduce using rule 34
	'go'           reduce using rule 34
	'!'            reduce using rule 34
	OP1            reduce using rule 34
	OP2            reduce using rule 34
	OP3            reduce using rule 34
	OP4            reduce using rule 34
	OP5            reduce using rule 34
	OP6            reduce using rule 34
	OP7            reduce using rule 34
	NAME           reduce using rule 34
	LITERAL        reduce using rule 34
	'('            reduce using rule 34


State 25

	OPNAME -> OP6 .                                     (rule 35)

	'if'           reduce using rule 35
	'while'        reduce using rule 35
	'fun'          reduce using rule 35
	'return'       reduce using rule 35
	'go'           reduce using rule 35
	'!'            reduce using rule 35
	OP1            reduce using rule 35
	OP2            reduce using rule 35
	OP3            reduce using rule 35
	OP4            reduce using rule 35
	OP5            reduce using rule 35
	OP6            reduce using rule 35
	OP7            reduce using rule 35
	NAME           reduce using rule 35
	LITERAL        reduce using rule 35
	'('            reduce using rule 35


State 26

	OPNAME -> OP7 .                                     (rule 36)

	'if'           reduce using rule 36
	'while'        reduce using rule 36
	'fun'          reduce using rule 36
	'return'       reduce using rule 36
	'go'           reduce using rule 36
	'!'            reduce using rule 36
	OP1            reduce using rule 36
	OP2            reduce using rule 36
	OP3            reduce using rule 36
	OP4            reduce using rule 36
	OP5            reduce using rule 36
	OP6            reduce using rule 36
	OP7            reduce using rule 36
	NAME           reduce using rule 36
	LITERAL        reduce using rule 36
	'('            reduce using rule 36


State 27

	expr -> NAME . '=' expr                             (rule 27)
	smallexpr -> NAME .                                 (rule 43)
	smallexpr -> NAME . '(' exprs ')'                   (rule 44)

	'||'           reduce using rule 43
	'&&'           reduce using rule 43
	OP1            reduce using rule 43
	OP2            reduce using rule 43
	OP3            reduce using rule 43
	OP4            reduce using rule 43
	OP5            reduce using rule 43
	OP6            reduce using rule 43
	OP7            reduce using rule 43
	'('            shift, and enter state 33
	')'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	'='            shift, and enter state 34


State 28

	smallexpr -> LITERAL .                              (rule 45)

	'||'           reduce using rule 45
	'&&'           reduce using rule 45
	OP1            reduce using rule 45
	OP2            reduce using rule 45
	OP3            reduce using rule 45
	OP4            reduce using rule 45
	OP5            reduce using rule 45
	OP6            reduce using rule 45
	OP7            reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45


State 29

	smallexpr -> '(' . expr ')'                         (rule 46)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	expr           goto state 31
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 30

	%start_getSyntaxTree -> program .                   (rule 0)

	%eof           accept


State 31

	smallexpr -> '(' expr . ')'                         (rule 46)

	')'            shift, and enter state 81


State 32

	smallexpr -> 'fun' . names_body                     (rule 49)

	'('            shift, and enter state 45

	names_body     goto state 41
	names_open     goto state 42

State 33

	smallexpr -> NAME '(' . exprs ')'                   (rule 44)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29
	')'            reduce using rule 56

	expr           goto state 79
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12
	exprs          goto state 80

State 34

	expr -> NAME '=' . expr                             (rule 27)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	expr           goto state 78
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 35

	opexpr -> opexpr . '||' opexpr                      (rule 37)
	opexpr -> opexpr . '&&' opexpr                      (rule 38)
	opexpr -> '!' opexpr .                              (rule 39)
	opexpr -> opexpr . OPNAME opexpr                    (rule 40)

	'||'           reduce using rule 39
	'&&'           reduce using rule 39
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	')'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39

	OPNAME         goto state 53

State 36

	smallexpr -> NAME .                                 (rule 43)
	smallexpr -> NAME . '(' exprs ')'                   (rule 44)

	'||'           reduce using rule 43
	'&&'           reduce using rule 43
	OP1            reduce using rule 43
	OP2            reduce using rule 43
	OP3            reduce using rule 43
	OP4            reduce using rule 43
	OP5            reduce using rule 43
	OP6            reduce using rule 43
	OP7            reduce using rule 43
	'('            shift, and enter state 33
	')'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43


State 37

	expr -> 'go' body .                                 (rule 28)

	'||'           reduce using rule 28
	'&&'           reduce using rule 28
	OP1            reduce using rule 28
	OP2            reduce using rule 28
	OP3            reduce using rule 28
	OP4            reduce using rule 28
	OP5            reduce using rule 28
	OP6            reduce using rule 28
	OP7            reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28


State 38

	body -> open . stmts close                          (rule 12)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'var'          shift, and enter state 15
	'fun'          shift, and enter state 16
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	stmts          goto state 77
	stmt           goto state 3
	fundecl        goto state 4
	fun_NAME       goto state 5
	fun_OPNAME     goto state 6
	vardecl        goto state 7
	expr           goto state 8
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 39

	open -> '{' .                                       (rule 14)

	'if'           reduce using rule 14
	'while'        reduce using rule 14
	'var'          reduce using rule 14
	'fun'          reduce using rule 14
	'return'       reduce using rule 14
	'go'           reduce using rule 14
	'!'            reduce using rule 14
	OP1            reduce using rule 14
	OP2            reduce using rule 14
	OP3            reduce using rule 14
	OP4            reduce using rule 14
	OP5            reduce using rule 14
	OP6            reduce using rule 14
	OP7            reduce using rule 14
	NAME           reduce using rule 14
	LITERAL        reduce using rule 14
	'('            reduce using rule 14


State 40

	expr -> 'return' expr .                             (rule 26)

	'||'           reduce using rule 26
	'&&'           reduce using rule 26
	OP1            reduce using rule 26
	OP2            reduce using rule 26
	OP3            reduce using rule 26
	OP4            reduce using rule 26
	OP5            reduce using rule 26
	OP6            reduce using rule 26
	OP7            reduce using rule 26
	')'            reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26


State 41

	smallexpr -> 'fun' names_body .                     (rule 49)

	'||'           reduce using rule 49
	'&&'           reduce using rule 49
	OP1            reduce using rule 49
	OP2            reduce using rule 49
	OP3            reduce using rule 49
	OP4            reduce using rule 49
	OP5            reduce using rule 49
	OP6            reduce using rule 49
	OP7            reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49


State 42

	names_body -> names_open . stmts close              (rule 13)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'var'          shift, and enter state 15
	'fun'          shift, and enter state 16
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	stmts          goto state 76
	stmt           goto state 3
	fundecl        goto state 4
	fun_NAME       goto state 5
	fun_OPNAME     goto state 6
	vardecl        goto state 7
	expr           goto state 8
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 43

	fun_OPNAME -> 'fun' OPNAME .                        (rule 20)

	'('            reduce using rule 20


State 44

	fun_NAME -> 'fun' NAME .                            (rule 19)

	'('            reduce using rule 19


State 45

	names_open -> '(' . names ')' '{'                   (rule 15)

	NAME           shift, and enter state 75
	')'            reduce using rule 11
	','            reduce using rule 11

	names          goto state 74

State 46

	vardecl -> 'var' vardecls .                         (rule 21)

	';'            reduce using rule 21


State 47

	vardecls -> declOrInit . ',' vardecls               (rule 22)
	vardecls -> declOrInit .                            (rule 23)

	','            shift, and enter state 73
	';'            reduce using rule 23


State 48

	declOrInit -> NAME .                                (rule 24)
	declOrInit -> NAME . '=' expr                       (rule 25)

	','            reduce using rule 24
	';'            reduce using rule 24
	'='            shift, and enter state 72


State 49

	smallexpr -> 'while' '(' . expr ')' body            (rule 48)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	expr           goto state 71
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 50

	ifcase -> 'if' '(' . expr ')' body                  (rule 50)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	expr           goto state 70
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 51

	smallexpr -> ifcase elseifs . elsecase              (rule 47)

	'else'         shift, and enter state 69
	'||'           reduce using rule 54
	'&&'           reduce using rule 54
	OP1            reduce using rule 54
	OP2            reduce using rule 54
	OP3            reduce using rule 54
	OP4            reduce using rule 54
	OP5            reduce using rule 54
	OP6            reduce using rule 54
	OP7            reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	';'            reduce using rule 54

	elsecase       goto state 68

State 52

	elseifs -> 'elsif' . '(' expr ')' body elseifs      (rule 51)

	'('            shift, and enter state 67


State 53

	opexpr -> opexpr OPNAME . opexpr                    (rule 40)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 36
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	OPNAME         goto state 9
	opexpr         goto state 66
	smallexpr      goto state 11
	ifcase         goto state 12

State 54

	opexpr -> opexpr '||' . opexpr                      (rule 37)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 36
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	OPNAME         goto state 9
	opexpr         goto state 65
	smallexpr      goto state 11
	ifcase         goto state 12

State 55

	opexpr -> opexpr '&&' . opexpr                      (rule 38)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 36
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	OPNAME         goto state 9
	opexpr         goto state 64
	smallexpr      goto state 11
	ifcase         goto state 12

State 56

	opexpr -> OPNAME expr .                             (rule 41)

	'||'           reduce using rule 41
	'&&'           reduce using rule 41
	OP1            reduce using rule 41
	OP2            reduce using rule 41
	OP3            reduce using rule 41
	OP4            reduce using rule 41
	OP5            reduce using rule 41
	OP6            reduce using rule 41
	OP7            reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41


State 57

	stmt -> expr ';' .                                  (rule 6)

	'if'           reduce using rule 6
	'while'        reduce using rule 6
	'var'          reduce using rule 6
	'fun'          reduce using rule 6
	'return'       reduce using rule 6
	'go'           reduce using rule 6
	'!'            reduce using rule 6
	OP1            reduce using rule 6
	OP2            reduce using rule 6
	OP3            reduce using rule 6
	OP4            reduce using rule 6
	OP5            reduce using rule 6
	OP6            reduce using rule 6
	OP7            reduce using rule 6
	NAME           reduce using rule 6
	LITERAL        reduce using rule 6
	'('            reduce using rule 6
	'}'            reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 58

	stmt -> vardecl ';' .                               (rule 5)

	'if'           reduce using rule 5
	'while'        reduce using rule 5
	'var'          reduce using rule 5
	'fun'          reduce using rule 5
	'return'       reduce using rule 5
	'go'           reduce using rule 5
	'!'            reduce using rule 5
	OP1            reduce using rule 5
	OP2            reduce using rule 5
	OP3            reduce using rule 5
	OP4            reduce using rule 5
	OP5            reduce using rule 5
	OP6            reduce using rule 5
	OP7            reduce using rule 5
	NAME           reduce using rule 5
	LITERAL        reduce using rule 5
	'('            reduce using rule 5
	'}'            reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 59

	fundecl -> fun_OPNAME names_body .                  (rule 18)

	'if'           reduce using rule 18
	'while'        reduce using rule 18
	'var'          reduce using rule 18
	'fun'          reduce using rule 18
	'return'       reduce using rule 18
	'go'           reduce using rule 18
	'!'            reduce using rule 18
	OP1            reduce using rule 18
	OP2            reduce using rule 18
	OP3            reduce using rule 18
	OP4            reduce using rule 18
	OP5            reduce using rule 18
	OP6            reduce using rule 18
	OP7            reduce using rule 18
	NAME           reduce using rule 18
	LITERAL        reduce using rule 18
	'('            reduce using rule 18
	'}'            reduce using rule 18
	';'            reduce using rule 18
	%eof           reduce using rule 18


State 60

	fundecl -> fun_NAME names_body .                    (rule 17)

	'if'           reduce using rule 17
	'while'        reduce using rule 17
	'var'          reduce using rule 17
	'fun'          reduce using rule 17
	'return'       reduce using rule 17
	'go'           reduce using rule 17
	'!'            reduce using rule 17
	OP1            reduce using rule 17
	OP2            reduce using rule 17
	OP3            reduce using rule 17
	OP4            reduce using rule 17
	OP5            reduce using rule 17
	OP6            reduce using rule 17
	OP7            reduce using rule 17
	NAME           reduce using rule 17
	LITERAL        reduce using rule 17
	'('            reduce using rule 17
	'}'            reduce using rule 17
	';'            reduce using rule 17
	%eof           reduce using rule 17


State 61

	stmts -> stmt scs . stmts                           (rule 2)
	stmts -> stmt scs .                                 (rule 3)
	scs -> scs . ';'                                    (rule 7)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'var'          shift, and enter state 15
	'fun'          shift, and enter state 16
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29
	'}'            reduce using rule 3
	';'            shift, and enter state 63
	%eof           reduce using rule 3

	stmts          goto state 62
	stmt           goto state 3
	fundecl        goto state 4
	fun_NAME       goto state 5
	fun_OPNAME     goto state 6
	vardecl        goto state 7
	expr           goto state 8
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 62

	stmts -> stmt scs stmts .                           (rule 2)

	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 63

	scs -> scs ';' .                                    (rule 7)

	'if'           reduce using rule 7
	'while'        reduce using rule 7
	'var'          reduce using rule 7
	'fun'          reduce using rule 7
	'return'       reduce using rule 7
	'go'           reduce using rule 7
	'!'            reduce using rule 7
	OP1            reduce using rule 7
	OP2            reduce using rule 7
	OP3            reduce using rule 7
	OP4            reduce using rule 7
	OP5            reduce using rule 7
	OP6            reduce using rule 7
	OP7            reduce using rule 7
	NAME           reduce using rule 7
	LITERAL        reduce using rule 7
	'('            reduce using rule 7
	'}'            reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 64

	opexpr -> opexpr . '||' opexpr                      (rule 37)
	opexpr -> opexpr . '&&' opexpr                      (rule 38)
	opexpr -> opexpr '&&' opexpr .                      (rule 38)
	opexpr -> opexpr . OPNAME opexpr                    (rule 40)

	'||'           reduce using rule 38
	'&&'           reduce using rule 38
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	')'            reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38

	OPNAME         goto state 53

State 65

	opexpr -> opexpr . '||' opexpr                      (rule 37)
	opexpr -> opexpr '||' opexpr .                      (rule 37)
	opexpr -> opexpr . '&&' opexpr                      (rule 38)
	opexpr -> opexpr . OPNAME opexpr                    (rule 40)

	'||'           reduce using rule 37
	'&&'           shift, and enter state 55
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	')'            reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37

	OPNAME         goto state 53

State 66

	opexpr -> opexpr . '||' opexpr                      (rule 37)
	opexpr -> opexpr . '&&' opexpr                      (rule 38)
	opexpr -> opexpr . OPNAME opexpr                    (rule 40)
	opexpr -> opexpr OPNAME opexpr .                    (rule 40)

	'||'           shift, and enter state 54
			(reduce using rule 40)

	'&&'           shift, and enter state 55
			(reduce using rule 40)

	OP1            shift, and enter state 20
			(reduce using rule 40)

	OP2            shift, and enter state 21
			(reduce using rule 40)

	OP3            shift, and enter state 22
			(reduce using rule 40)

	OP4            shift, and enter state 23
			(reduce using rule 40)

	OP5            shift, and enter state 24
			(reduce using rule 40)

	OP6            shift, and enter state 25
			(reduce using rule 40)

	OP7            shift, and enter state 26
			(reduce using rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40

	OPNAME         goto state 53

State 67

	elseifs -> 'elsif' '(' . expr ')' body elseifs      (rule 51)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	expr           goto state 94
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 68

	smallexpr -> ifcase elseifs elsecase .              (rule 47)

	'||'           reduce using rule 47
	'&&'           reduce using rule 47
	OP1            reduce using rule 47
	OP2            reduce using rule 47
	OP3            reduce using rule 47
	OP4            reduce using rule 47
	OP5            reduce using rule 47
	OP6            reduce using rule 47
	OP7            reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47


State 69

	elsecase -> 'else' . body                           (rule 53)

	'{'            shift, and enter state 39

	body           goto state 93
	open           goto state 38

State 70

	ifcase -> 'if' '(' expr . ')' body                  (rule 50)

	')'            shift, and enter state 92


State 71

	smallexpr -> 'while' '(' expr . ')' body            (rule 48)

	')'            shift, and enter state 91


State 72

	declOrInit -> NAME '=' . expr                       (rule 25)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29

	expr           goto state 90
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12

State 73

	vardecls -> declOrInit ',' . vardecls               (rule 22)

	NAME           shift, and enter state 48

	vardecls       goto state 89
	declOrInit     goto state 47

State 74

	names -> names . ',' NAME                           (rule 9)
	names_open -> '(' names . ')' '{'                   (rule 15)

	')'            shift, and enter state 87
	','            shift, and enter state 88


State 75

	names -> NAME .                                     (rule 10)

	')'            reduce using rule 10
	','            reduce using rule 10


State 76

	names_body -> names_open stmts . close              (rule 13)

	'}'            shift, and enter state 85

	close          goto state 86

State 77

	body -> open stmts . close                          (rule 12)

	'}'            shift, and enter state 85

	close          goto state 84

State 78

	expr -> NAME '=' expr .                             (rule 27)

	'||'           reduce using rule 27
	'&&'           reduce using rule 27
	OP1            reduce using rule 27
	OP2            reduce using rule 27
	OP3            reduce using rule 27
	OP4            reduce using rule 27
	OP5            reduce using rule 27
	OP6            reduce using rule 27
	OP7            reduce using rule 27
	')'            reduce using rule 27
	','            reduce using rule 27
	';'            reduce using rule 27


State 79

	exprs -> expr . ',' exprs                           (rule 55)

	','            shift, and enter state 83


State 80

	smallexpr -> NAME '(' exprs . ')'                   (rule 44)

	')'            shift, and enter state 82


State 81

	smallexpr -> '(' expr ')' .                         (rule 46)

	'||'           reduce using rule 46
	'&&'           reduce using rule 46
	OP1            reduce using rule 46
	OP2            reduce using rule 46
	OP3            reduce using rule 46
	OP4            reduce using rule 46
	OP5            reduce using rule 46
	OP6            reduce using rule 46
	OP7            reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46


State 82

	smallexpr -> NAME '(' exprs ')' .                   (rule 44)

	'||'           reduce using rule 44
	'&&'           reduce using rule 44
	OP1            reduce using rule 44
	OP2            reduce using rule 44
	OP3            reduce using rule 44
	OP4            reduce using rule 44
	OP5            reduce using rule 44
	OP6            reduce using rule 44
	OP7            reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44


State 83

	exprs -> expr ',' . exprs                           (rule 55)

	'if'           shift, and enter state 13
	'while'        shift, and enter state 14
	'fun'          shift, and enter state 32
	'return'       shift, and enter state 17
	'go'           shift, and enter state 18
	'!'            shift, and enter state 19
	OP1            shift, and enter state 20
	OP2            shift, and enter state 21
	OP3            shift, and enter state 22
	OP4            shift, and enter state 23
	OP5            shift, and enter state 24
	OP6            shift, and enter state 25
	OP7            shift, and enter state 26
	NAME           shift, and enter state 27
	LITERAL        shift, and enter state 28
	'('            shift, and enter state 29
	')'            reduce using rule 56

	expr           goto state 79
	OPNAME         goto state 9
	opexpr         goto state 10
	smallexpr      goto state 11
	ifcase         goto state 12
	exprs          goto state 100

State 84

	body -> open stmts close .                          (rule 12)

	'else'         reduce using rule 12
	'elsif'        reduce using rule 12
	'||'           reduce using rule 12
	'&&'           reduce using rule 12
	OP1            reduce using rule 12
	OP2            reduce using rule 12
	OP3            reduce using rule 12
	OP4            reduce using rule 12
	OP5            reduce using rule 12
	OP6            reduce using rule 12
	OP7            reduce using rule 12
	')'            reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12


State 85

	close -> '}' .                                      (rule 16)

	'if'           reduce using rule 16
	'else'         reduce using rule 16
	'elsif'        reduce using rule 16
	'while'        reduce using rule 16
	'var'          reduce using rule 16
	'fun'          reduce using rule 16
	'return'       reduce using rule 16
	'go'           reduce using rule 16
	'||'           reduce using rule 16
	'&&'           reduce using rule 16
	'!'            reduce using rule 16
	OP1            reduce using rule 16
	OP2            reduce using rule 16
	OP3            reduce using rule 16
	OP4            reduce using rule 16
	OP5            reduce using rule 16
	OP6            reduce using rule 16
	OP7            reduce using rule 16
	NAME           reduce using rule 16
	LITERAL        reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'}'            reduce using rule 16
	','            reduce using rule 16
	';'            reduce using rule 16
	%eof           reduce using rule 16


State 86

	names_body -> names_open stmts close .              (rule 13)

	'if'           reduce using rule 13
	'while'        reduce using rule 13
	'var'          reduce using rule 13
	'fun'          reduce using rule 13
	'return'       reduce using rule 13
	'go'           reduce using rule 13
	'||'           reduce using rule 13
	'&&'           reduce using rule 13
	'!'            reduce using rule 13
	OP1            reduce using rule 13
	OP2            reduce using rule 13
	OP3            reduce using rule 13
	OP4            reduce using rule 13
	OP5            reduce using rule 13
	OP6            reduce using rule 13
	OP7            reduce using rule 13
	NAME           reduce using rule 13
	LITERAL        reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'}'            reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	%eof           reduce using rule 13


State 87

	names_open -> '(' names ')' . '{'                   (rule 15)

	'{'            shift, and enter state 99


State 88

	names -> names ',' . NAME                           (rule 9)

	NAME           shift, and enter state 98


State 89

	vardecls -> declOrInit ',' vardecls .               (rule 22)

	';'            reduce using rule 22


State 90

	declOrInit -> NAME '=' expr .                       (rule 25)

	','            reduce using rule 25
	';'            reduce using rule 25


State 91

	smallexpr -> 'while' '(' expr ')' . body            (rule 48)

	'{'            shift, and enter state 39

	body           goto state 97
	open           goto state 38

State 92

	ifcase -> 'if' '(' expr ')' . body                  (rule 50)

	'{'            shift, and enter state 39

	body           goto state 96
	open           goto state 38

State 93

	elsecase -> 'else' body .                           (rule 53)

	'||'           reduce using rule 53
	'&&'           reduce using rule 53
	OP1            reduce using rule 53
	OP2            reduce using rule 53
	OP3            reduce using rule 53
	OP4            reduce using rule 53
	OP5            reduce using rule 53
	OP6            reduce using rule 53
	OP7            reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	';'            reduce using rule 53


State 94

	elseifs -> 'elsif' '(' expr . ')' body elseifs      (rule 51)

	')'            shift, and enter state 95


State 95

	elseifs -> 'elsif' '(' expr ')' . body elseifs      (rule 51)

	'{'            shift, and enter state 39

	body           goto state 101
	open           goto state 38

State 96

	ifcase -> 'if' '(' expr ')' body .                  (rule 50)

	'else'         reduce using rule 50
	'elsif'        reduce using rule 50
	'||'           reduce using rule 50
	'&&'           reduce using rule 50
	OP1            reduce using rule 50
	OP2            reduce using rule 50
	OP3            reduce using rule 50
	OP4            reduce using rule 50
	OP5            reduce using rule 50
	OP6            reduce using rule 50
	OP7            reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50


State 97

	smallexpr -> 'while' '(' expr ')' body .            (rule 48)

	'||'           reduce using rule 48
	'&&'           reduce using rule 48
	OP1            reduce using rule 48
	OP2            reduce using rule 48
	OP3            reduce using rule 48
	OP4            reduce using rule 48
	OP5            reduce using rule 48
	OP6            reduce using rule 48
	OP7            reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48


State 98

	names -> names ',' NAME .                           (rule 9)

	')'            reduce using rule 9
	','            reduce using rule 9


State 99

	names_open -> '(' names ')' '{' .                   (rule 15)

	'if'           reduce using rule 15
	'while'        reduce using rule 15
	'var'          reduce using rule 15
	'fun'          reduce using rule 15
	'return'       reduce using rule 15
	'go'           reduce using rule 15
	'!'            reduce using rule 15
	OP1            reduce using rule 15
	OP2            reduce using rule 15
	OP3            reduce using rule 15
	OP4            reduce using rule 15
	OP5            reduce using rule 15
	OP6            reduce using rule 15
	OP7            reduce using rule 15
	NAME           reduce using rule 15
	LITERAL        reduce using rule 15
	'('            reduce using rule 15


State 100

	exprs -> expr ',' exprs .                           (rule 55)

	')'            reduce using rule 55


State 101

	elseifs -> 'elsif' '(' expr ')' body . elseifs      (rule 51)

	'else'         reduce using rule 52
	'elsif'        shift, and enter state 52
	'||'           reduce using rule 52
	'&&'           reduce using rule 52
	OP1            reduce using rule 52
	OP2            reduce using rule 52
	OP3            reduce using rule 52
	OP4            reduce using rule 52
	OP5            reduce using rule 52
	OP6            reduce using rule 52
	OP7            reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	';'            reduce using rule 52

	elseifs        goto state 102

State 102

	elseifs -> 'elsif' '(' expr ')' body elseifs .      (rule 51)

	'else'         reduce using rule 51
	'||'           reduce using rule 51
	'&&'           reduce using rule 51
	OP1            reduce using rule 51
	OP2            reduce using rule 51
	OP3            reduce using rule 51
	OP4            reduce using rule 51
	OP5            reduce using rule 51
	OP6            reduce using rule 51
	OP7            reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	';'            reduce using rule 51


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 57
Number of terminals: 27
Number of non-terminals: 25
Number of states: 103
